import unittest
import os

import numpy as np

from learning_from_demo.dynamical_movement_primitives import DynamicMovementPrimitives


class DynamicalMovementPrimitivesTest(unittest.TestCase):
    @staticmethod
    def _create_dmp():

        # standard data file to perform tests
        filename = "regression_line.npy"
        file_dir = os.path.join(os.path.dirname(__file__), "dmp_data")
        filename_path = os.path.join(file_dir, filename)
        regression = np.load(filename_path)
        return DynamicMovementPrimitives(
            regression_fct=regression,
            alpha_z=18 * np.array([1, 1, 1, 1, 1, 1]),
            n_rfs=30,
            c_order=1,
        )

    def test_dmp_time_constant(self):

        dmp = self._create_dmp()
        self.assertEqual(dmp._tau, 6.31)

    def test_rbf_kernels(self):

        dmp = self._create_dmp()
        # test rbf kernel centers
        np.testing.assert_almost_equal(
            dmp._c[:, 0],
            np.array(
                [
                    1.0,
                    0.960,
                    0.871,
                    0.761,
                    0.647,
                    0.540,
                    0.444,
                    0.361,
                    0.290,
                    0.232,
                    0.184,
                    0.145,
                    0.114,
                    0.089,
                    0.069,
                    0.053,
                    0.041,
                    0.032,
                    0.024,
                    0.018,
                    0.014,
                    0.011,
                    0.008,
                    0.006,
                    0.004,
                    0.003,
                    0.002,
                    0.002,
                    0.001,
                    0.001,
                ]
            ),
            decimal=3,
        )
        # test rbf kernels covariances
        np.testing.assert_almost_equal(
            dmp._D[:, 0],
            np.array(
                [
                    2.14441789e03,
                    4.12720597e02,
                    2.72556489e02,
                    2.57144065e02,
                    2.88413967e02,
                    3.58399268e02,
                    4.76648026e02,
                    6.65276700e02,
                    9.62711440e02,
                    1.43274969e03,
                    2.18059799e03,
                    3.38013810e03,
                    5.32005150e03,
                    8.48198009e03,
                    1.36733865e04,
                    2.22541407e04,
                    3.65241900e04,
                    6.03888400e04,
                    1.00503699e05,
                    1.68250405e05,
                    2.83154544e05,
                    4.78812503e05,
                    8.13191896e05,
                    1.38657058e06,
                    2.37284098e06,
                    4.07423991e06,
                    7.01720367e06,
                    1.21205333e07,
                    2.09908897e07,
                    2.09908897e07,
                ]
            ),
            decimal=1,
        )

    def test_forcing_term_weights(self):

        dmp = self._create_dmp()
        np.testing.assert_almost_equal(
            dmp._w,
            np.array(
                [
                    [
                        4.39161673e02,
                        4.41651111e02,
                        4.49175386e02,
                        4.63449988e02,
                        4.79091736e02,
                        4.83755715e02,
                        4.63169088e02,
                        4.21989902e02,
                        4.04998594e02,
                        4.42211847e02,
                        4.78785131e02,
                        4.60395369e02,
                        4.00001729e02,
                        3.16888196e02,
                        1.95306335e02,
                        -8.07743935e00,
                        -3.51434457e02,
                        -9.05803860e02,
                        -1.75843427e03,
                        -3.00944399e03,
                        -4.74249659e03,
                        -6.93135650e03,
                        -9.22148550e03,
                        -1.05703468e04,
                        -9.04678568e03,
                        -2.75311607e03,
                        7.48018024e03,
                        1.65134830e04,
                        1.90436992e04,
                        1.52531674e04,
                    ],
                    [
                        7.62767651e02,
                        8.05275824e02,
                        8.53645011e02,
                        9.33580231e02,
                        1.05417640e03,
                        1.21046389e03,
                        1.35893969e03,
                        1.39454493e03,
                        1.24088124e03,
                        1.03188401e03,
                        9.76501734e02,
                        1.06749596e03,
                        1.19799160e03,
                        1.31485354e03,
                        1.38355009e03,
                        1.34997463e03,
                        1.13816713e03,
                        6.47106737e02,
                        -2.61482835e02,
                        -1.77323203e03,
                        -4.10662061e03,
                        -7.42224644e03,
                        -1.15515255e04,
                        -1.54357951e04,
                        -1.65068996e04,
                        -1.12842062e04,
                        1.14259650e03,
                        1.53609834e04,
                        2.31271096e04,
                        2.16946591e04,
                    ],
                    [
                        -7.21283575e02,
                        -7.47014085e02,
                        -7.77511701e02,
                        -8.28970189e02,
                        -9.06087822e02,
                        -1.00769959e03,
                        -1.12267332e03,
                        -1.22261235e03,
                        -1.27769812e03,
                        -1.29954921e03,
                        -1.32798605e03,
                        -1.37483145e03,
                        -1.43591192e03,
                        -1.50601472e03,
                        -1.55940892e03,
                        -1.54187811e03,
                        -1.37546103e03,
                        -9.56605236e02,
                        -1.44529976e02,
                        1.25057051e03,
                        3.45853813e03,
                        6.66971655e03,
                        1.07809190e04,
                        1.48466501e04,
                        1.64235934e04,
                        1.20197587e04,
                        3.88006574e02,
                        -1.35933974e04,
                        -2.18598121e04,
                        -2.12349570e04,
                    ],
                    [
                        6.22899967e02,
                        6.16827771e02,
                        6.22849580e02,
                        6.40140774e02,
                        6.60951917e02,
                        6.70426103e02,
                        6.55466757e02,
                        6.30488638e02,
                        6.51227022e02,
                        7.32229427e02,
                        7.85070715e02,
                        7.52121714e02,
                        6.67197586e02,
                        5.60787874e02,
                        4.11319265e02,
                        1.58716916e02,
                        -2.77875050e02,
                        -9.97103691e02,
                        -2.11989935e03,
                        -3.78530447e03,
                        -6.11097039e03,
                        -9.06544947e03,
                        -1.21672778e04,
                        -1.39849260e04,
                        -1.18460919e04,
                        -3.08729720e03,
                        1.12273465e04,
                        2.40582900e04,
                        2.80390606e04,
                        2.33053821e04,
                    ],
                    [
                        -1.03368177e02,
                        -1.31477716e02,
                        -1.59826779e02,
                        -2.04191495e02,
                        -2.72438190e02,
                        -3.61775393e02,
                        -4.30270363e02,
                        -3.70846391e02,
                        -1.07680535e02,
                        2.03009904e02,
                        3.21820339e02,
                        2.61350493e02,
                        1.59959160e02,
                        8.60266490e01,
                        5.44415943e01,
                        6.91336702e01,
                        1.33609211e02,
                        2.53058504e02,
                        4.35672649e02,
                        6.90769773e02,
                        1.01958260e03,
                        1.39142719e03,
                        1.69560310e03,
                        1.67568839e03,
                        9.27902913e02,
                        -8.35397634e02,
                        -3.21398254e03,
                        -4.97950748e03,
                        -5.16817912e03,
                        -4.15880027e03,
                    ],
                    [
                        -4.42379284e02,
                        -4.44448094e02,
                        -4.52915545e02,
                        -4.70041371e02,
                        -4.91745925e02,
                        -5.08173613e02,
                        -5.07890745e02,
                        -4.93855630e02,
                        -4.99261006e02,
                        -5.43986605e02,
                        -5.81591786e02,
                        -5.69112192e02,
                        -5.18863328e02,
                        -4.47325992e02,
                        -3.39514324e02,
                        -1.53698571e02,
                        1.68107470e02,
                        6.98382955e02,
                        1.52724050e03,
                        2.75936313e03,
                        4.48528497e03,
                        6.68784523e03,
                        9.02021541e03,
                        1.04337737e04,
                        8.95298761e03,
                        2.58124706e03,
                        -7.95230740e03,
                        -1.74830911e04,
                        -2.05294159e04,
                        -1.71055027e04,
                    ],
                ]
            ),
            decimal=3,
        )

    def test_dmp_convergence(self):

        dmp = self._create_dmp()
        _ = dmp.compute_joint_dynamics(
            goal=np.array([20.874, 23.377, 25.108, 28.372, -53.129, -18.937]),
            y_init=np.array([-3.002, -20.142, 66.025, -4.175, -46.443, 4.869]),
        )
        # test that the last combination of joint angles corresponds to the target one
        np.testing.assert_almost_equal(
            dmp.y[-1, :, 0],
            np.array([20.715, 23.163, 25.317, 28.118, -53.078, -18.752]),
            decimal=3,
        )

    def test_convergence_to_dummy_data(self):

        # manually generated regression line to track, the method coefficients have been
        # tuned accordingly. If test fails, check that the method has not been changed
        dmp = DynamicMovementPrimitives(
            regression_fct=np.array(
                [
                    [0, 0, 0, 0, 0, 0, 0],
                    [0.01, 0, 0, 0, 0, 0, 0],
                    [0.02, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
                    [0.03, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2],
                ]
            ),
            alpha_z=1 * np.array([1, 1, 1, 1, 1, 1]),
            n_rfs=2,
            c_order=1,
        )
        _ = dmp.compute_joint_dynamics(
            goal=np.array([0.2, 0.2, 0.2, 0.2, 0.2, 0.2]),
            y_init=np.array([0, 0, 0, 0, 0, 0]),
        )
        # test that the last combination of joint angles corresponds to the target one
        np.testing.assert_almost_equal(
            dmp.y[-1, :, 0], np.array([0.2, 0.2, 0.2, 0.2, 0.2, 0.2]), decimal=3,
        )
